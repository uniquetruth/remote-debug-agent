/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
//apply plugin: 'java-library'
//apply plugin: 'org.gretty'
plugins{
    id 'java-library'
}

jar {
    archiveName 'remote-debug-agent.jar'
    manifest {
        attributes 'Premain-Class': 'com.github.rdagent.AgentEntrance'
        attributes 'Agent-Class': 'com.github.rdagent.AgentEntrance'
        attributes 'Can-Retransform-Classes': 'true'
        attributes 'Built-By': 'uniqueT'
        attributes 'Build-Jdk': '1.8'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    mavenCentral()
    google()
    jcenter()
    //maven { url "https://jitpack.io" }
}

dependencies {
    compileOnly files("${System.properties['java.home']}/../lib/tools.jar")
    compileOnly 'org.ow2.asm:asm:9.0'
    compileOnly 'org.ow2.asm:asm-tree:9.0'
    compileOnly 'org.ow2.asm:asm-commons:9.0'
    compileOnly 'com.google.code.gson:gson:2.8.9'
    compileOnly 'org.eclipse.jetty:jetty-server:9.4.9.v20180320'
    compileOnly 'org.eclipse.jetty:jetty-servlet:9.4.9.v20180320'
	
    testImplementation 'org.springframework.boot:spring-boot-starter-web:2.6.2'
    testImplementation 'com.squareup.okhttp3:okhttp:4.9.3'
    testImplementation 'junit:junit:4.13'
    testImplementation 'com.google.code.gson:gson:2.8.9'
    testImplementation 'mysql:mysql-connector-java:5.1.40'
    testImplementation 'org.apache.dubbo:dubbo-spring-boot-starter:3.1.0'
    testImplementation 'org.apache.dubbo:dubbo:3.1.0'
}

task copyJars(type:Copy) {
    exclude('tools.jar')
    from configurations.compileClasspath
    into 'build/libs'
}

task agentTest(type: JavaExec, dependsOn:[ jar, testClasses]) {
    def agentPath = '-javaagent:./build/libs/remote-debug-agent.jar'
    def premainArgs = '=includes=com.github.rdagent.app,outputdir=.,apiport=0,dependIP=false'
    classpath = files('./build/classes/java/test', configurations.testRuntimeClasspath)
    main = 'com.github.rdagent.app.AppClass'
    jvmArgs = [ agentPath+premainArgs, '-Drdagent.trace=true', '-Drdagent.trace.lines=true' ]
}

//run test Application in another JVM
abstract class AsyncJavaExec extends DefaultTask{
    
    @Input
    abstract Property<String> getMain()
    @Input
    abstract ListProperty<String> getJvmArgs()
    @Input
    abstract ListProperty<String> getArgs()
    
    @TaskAction
    def asyncRun(){
        def m = main.get()
        def jvmArgs = jvmArgs.get()
        def args = args.get()
        def command = ['java'].toList()
        command.addAll(jvmArgs)
        command.add(m)
        command.addAll(args)
        ProcessBuilder builder = new ProcessBuilder(command)
        builder.redirectErrorStream(true)
        builder.directory(project.projectDir)
        //println command
        builder.start()
    }
}

task runWebApp(type: AsyncJavaExec, dependsOn: [jar, testClasses]){
    def agentPath = '-javaagent:./build/libs/remote-debug-agent.jar'
    def premainArgs = '=includes=com.github.rdagent.app,outputdir=.,apiport=8098,dependIP=true'
    def classpath = files('./build/classes/java/test', configurations.testRuntimeClasspath)
    main = 'com.github.rdagent.app.WebApplication'
    jvmArgs = [ '-cp', classpath.asPath, agentPath+premainArgs, '-Dlogging.level.root=info' ]
    args = ['test.log']
    doLast {
        println('async java task started')
    }
}

test.dependsOn([cleanTest, runWebApp])

jar.dependsOn(copyJars)

